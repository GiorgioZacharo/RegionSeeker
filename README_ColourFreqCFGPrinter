Overview

    ColourFreqCFGPrinter is a plug-in of latest LLVM version (3.8) and is included in the 
    RegionSeekerÂ© framework. It was developed by the HW/SW co-design Research Team at 
    Universita' della Svizzera italiana (USI Lugano)

    Under the scope of the research  project Magic ISEs: Enlarging the Scope of Automatic 
    Instruction Set Extension, supervised by Prof. Laura Pozzi.

    It consists of one LLVM Analysis Pass: BBFreqInfo and several shell scripts that load the 
    pass and generate the Colour-annotated with respect to each Basic Block (BB) Execution 
    Frequency Control Flow Graph (CFG) PDF files.

    The rule to call it within the Makefile (aka Makefile_RegionSeeker) is: colour_freq_cfg

    The process is as follows:

    a) Profiling

        The existing tools of LLVM are used to generate an instrumented version of the binary of
        a provided benchmark.

        http://clang.llvm.org/docs/UsersManual.html#profiling-with-instrumentation

        e.g.

         clang -O3 -fprofile-instr-generate bench.c -o bench_instrumented

        The bench.profdata file generated and used to generate the respective *.ir files of the 
        benchmark.

         bench_instrumented $(BENCH_COMMAND_LINE_PARAMETERS)
         llvm-profdata merge -output=$(BENCH).profdata default.profraw

         clang -S -emit-llvm -O3 -fprofile-instr-use=$(BENCH).profdata -o bench.ir bench.c


    b) Dot files

        Dot CFG files are generated for every IR file that has been generated in the previous step.    

     
    c) BB Frequency Info extracted

        The Analysis Pass is being in use by the gatherFreq.sh script. We are feeding them the *.ir 
        files that were produced in the first step (which contain the profiling info needed).

        BIN_DIR_LLVM=$(pwd)/llvm_3.8/build/bin
        LIB_DIR_LLVM=$(pwd)/llvm_3.8/build/lib

        $BIN_DIR_INSTRUM/opt -load LIB_DIR_LLVM/BBFreqInfo.so -O3 -BBFreqInfo -analyze -q *.ir
        
        The output from loading this pass provides us with the Frequency Info for each BB.

    d) Sort BBs and print PDFs
        
        Subsequently we sort the BBs in 8 groups from the Coldest to the Hottest.
        We identify them in the respective Dot files, modify them to the appropriate colour 
        using the Weather Map Temperature notation and print the PDF files in the 
        CFG_colour_freq_graphs_BENCHMARK directory.   
 
 Makefiles

    There is a Makefile_RegionSeeker file for every benchmark that needs minor modifications
    in order to be used for each of them or any other benchmark.

    The Makefile_RegionSeeker is included in the Makefile_orig of every benchmark.
    Makefile_orig is simply a copy of the original Makefile, which has been slightly 
    modified to use the Makefile_RegionSeeker. (to include the Makefile_RegionSeeker) 

    Modification of Makefiles

    Example in jpeg benchmark:

    Copy original Makefile and do the following:

    A) In Makefile_orig

        1) Comment out old CC. The new one clang 3.8 is going to be used.

        # The name of your C compiler:
        #CC= gcc

        2) Change CFLAGS to CFLAGS_orig

        # You may need to adjust these cc options:
        CFLAGS_orig= -O  -I$(srcdir)

        3) Include Makefile_RegionSeeker *after* objects definition.

        ....
        TROBJECTS= jpegtran.o rdswitch.o cdjpeg.o

        include Makefile_RegionSeeker
        ....

    B) In Makefile_RegionSeeker add the following:

        1) Add the Benchmark's name

        # BENCH Name
        BENCH=cjpeg

        2) Add the cmd line input parameters to run the binary.

        BENCH_COMMAND_LINE_PARAMETERS= -dct int -progressive -opt -outfile output_large_encode.jpeg ../input_large.ppm

        3) Add the benchmarks objects to construct the binary

        # Add the Obects needed to be compiled.
        
        BENCH_OBJECTS= $(COBJECTS) libjpeg.a

        4) Add the benchmark's source files that are going to generate the respective IR files.

        REGIONSOURCES= $(LIBSOURCES) $(APPSOURCES)


    RULES:

    profile

        The profile rule compiles all the needed objects and generates the instrumented
        version of the binary. Using the the bench.profdata file generated, the respective
        *.ir files are produced with the initial profiling annotation.


        e.g.
        
        make -f Makefile_orig profile
       


    colour_freq_cfg
        
       Produces the Colour-annotated with respect to each Basic Block (BB) Frequency
       Control Flow Graph (CFG) PDF files.

        e.g. 

        make -f Makefile_orig colour_freq_cfg




Usage

    The Makefile is used as follows:

    make -f Makefile_orig colour_freq_cfg



   ** Modifications are needed to comply for every benchmark. **

    
    # Authors
    
    Georgios Zacharopoulos <georgios.zacharopoulos@usi.ch>
    Date: July, 2016
